{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["\n// У файлі pixabay-api.js зберігай функції для HTTP-запитів.\n\nconst hits = {\n  q: \"\", image_type: \"photo\" , orientation: \"horizontal\", safesearch: true\n}\n\nconst API_KEY = \"44760113-b733d2f51a4c6409aa3483a05\";\n// fetch(`https://pixabay.com/api/?key=${API_KEY}`)\n\nexport function getImage() {\n  return fetch(`https://pixabay.com/api/?key=${API_KEY}&q=cat`).then(response => { \n      //console.log(response); // приходить вiд серверу в вигл обекта РЕСПОНС - response\n      if (!response.ok) {\n        throw new Error(response.status); // перевiрка в разi помилки 404 щоб пропустила в catch\n      }\n      return response.json(); // виклкикаеттся на обект i повертае promis\n    }\n    );\n    }\n\n","\n//Бібліотека містить метод [refresh()](<https://github.com/andreknieriem/simplelightbox#public-methods>), який обов'язково потрібно викликати щоразу після додавання нових елементів до галереї.\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\nvar lightbox = new SimpleLightbox('.gallery a', { captionDelay: 200, captionsData: 'alt'  });\n// const hits = {\n//     q: \"\", image_type: \"photo\" , orientation: \"horizontal\", safesearch: true, name: \"\"\n//    } \n//    const API_KEYs = \"44760113-b733d2f51a4c6409aa3483a05\";\n\n   \n// const parameters = {\n//   webformatURL: \"\",        \n//   largeImageURL: \"\",\n//   tags : \"alt\",\n//   views: 1,\n//   downloads: 1,\n//   likes: 1,\n//   comments: 1,\n//   user_id: 1,\n//   user: \"\",\n// };\n\n// function fechPhoto(hits) {\n//     return fetch(`https://pixabay.com/api/?key=${API_KEYs}`, parameters ).then(response => { \n//         console.log(response); \n//         if (!response.ok) {\n//           throw new Error(response.status); \n//         }\n//         return response.json(); // виклкикаеттся на обект, повертае Promes\n//       }\n//       );\n// }\n\n// export {fechPhoto};\n\n\n// const formSearchImage = document.querySelector(\".uzers-form-image\");\n// formSearchImage.addEventListener('submit', handlerSearch);\n//поки що коментую (це була основна функція)\n\n// function handlerSearch(event) {\n//  // event.preventDefault();\n//        const form = event.currentTarget.elements; // посилання на елемент форми\n//        const photQueryValue = form.elements.searchQuery.value.toLowerCase().trim(); //значення яке написав користувач\n\n//        fechPhoto(photQueryValue) // робимо запит на сервер та отримуємо відповідь\n//        .then(creatMarGallery)   // запускаємо функцію яка відмалюовує карточки\n//        .catch(fechGallery) \n//        //.catch(handlerInput)  // первіряємо на помилки та видаємо повідомлення якщо такого не існує (404) Показати message: `Sorry\n//        .finally(() => form.reset()); //очистка данних форми після закінчення промісу(очистка тексту в інпуті)\n// };\n// export {handlerSearch};\n\nconst galleryContainer = document.querySelector('.gallery'); // створює розмітку для галереї\ngalleryContainer.addEventListener('submit', renderGalleryMarkap);\n   //function renderGalleryMarkap({views, downloads, likes, comments, webformatURL, tags, largeImageURL, hits}) \n   export function renderGalleryMarkap(images) {\n    const markup = images\n    .map((image) =>  \n      ` \n    <li class=\"gallery-item\">\n    <a class=\"gallery-link\" href=\"${image.largeImageURL}\">\n    <img class=\"gallery-image\" src=\"${image.webformatURL}\" alt=\"${image.tags}\" title=\"${image.name}\"/></a>\n    <div class=\"gallery-paragraf\">\n    <p class=\"gallery-commant\">likes ${image.likes}</p>\n    <p class=\"gallery-commant\">views ${image.views}</p>\n    <p class=\"gallery-commant\">comments ${image.comments}</p>\n    <p class=\"gallery-commant\">downloads ${image.downloads}</p>\n    </div>\n    </li> \n     ` )\n      .join(\"\")\n      galleryContainer.insertAdjacentHTML(\"beforeend\", markup);\n      lightbox.refresh()\n  };\n \n\n// проста функція виклика повідомлення про помилку без перевірки\n\n//  function fechGallery(error) {\n//   iziToast.error({title: 'Error', \n//     message: `Sorry, there are no images matching your search query. Please try again!`})\n//  }\n\n\n\n// initialSelector = null; // закоментований метод нижче refresh() з бібліотеки\n// this.initialSelector = elements;\n// refresh() {\n//   if (!this.initialSelector) {\n//       throw 'refreshing only works when you initialize using a selector!';\n//   }\n//   let options = this.options,\n//       selector = this.initialSelector;\n//   this.destroy();\n//   this.constructor(selector, options);\n//   return this;\n// }\n// export default SimpleLightbox;\n \n// const forms = document.querySelector('.uzers-form-image'); //  функція прослуховує на значення введене Юзером\n// forms.addEventListener('input', handlerInput );\n// function handlerInput(event) {\n//     event.preventDefault();\n// if (!photQueryValue === safesearch) // Показати message: `Sorry, використати приклад якщо не знаходиться така назва в бібліотеці pixabay\n//   {\n//     iziToast.error({\n//         title: 'Error',\n//         message: `Sorry, there are no images matching your search query. Please try again!`\n//     })\n//   }};\n    \n//  export {handlerInput};\n\n\n\n// підключити ще бібліотеку для завантаження спінера(нижче взяв з репозиторію)\n// const main = document.getElementById('main');\n// // Create Spinners \n// LOADERS.forEach((loader, i) => {    \n//     // Append Loader\n//     main.appendChild(createLoader(i));\n    \n// })\n\n\n\n\n\n\n\n\n\n\n","\n\nimport {getImage} from \"./js/pixabay-api\"\n// import {fechPhoto} from \"./js/render-functions\"\n//  import {handlerSearch} from \"./js/render-functions\"\n import {renderGalleryMarkap} from \"./js/render-functions\"\n\n// fechPhoto().then(data => console.log(data));\n// renderGalleryMarkap().then(data => console.log(data));\n\n\nconst formSearchImage = document.querySelector(\".uzers-form-image\");//все запускається з сабміта форми\nformSearchImage.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n    event.preventDefault();\n    getImage().then(data => {\n        console.log(data);\n        renderGalleryMarkap(data.hits)\n    })\n}\n\n\n// handlerSearch().then(data => console.log(data));\n\n// const refsOutput = {\n//     formS: document.querySelector('.uzers-form-image'),\n//      imGgallery: document.querySelector('.gallery')\n    \n// }\n\n// //formSearchImage.addEventListener('submit', handlerSearch);\n// // refsOutput.formS.addEventListener('submit', handlerSearch);\n\n// refsOutput.formS.addEventListener('submit', handlerSubmit);\n\n// function handlerSubmit(event) {\n//     event.preventDefault();\n//     userRequest = event.target.searchQuery.value.trim()\n//     getImage(userRequest).then(data => console.log(data));\n// }\n"],"names":["API_KEY","getImage","response","lightbox","SimpleLightbox","galleryContainer","renderGalleryMarkap","images","markup","image","formSearchImage","onFormSubmit","event","data"],"mappings":"svBAOA,MAAMA,EAAU,qCAGT,SAASC,GAAW,CACzB,OAAO,MAAM,gCAAgCD,CAAO,QAAQ,EAAE,KAAKE,GAAY,CAE3E,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAMA,EAAS,MAAM,EAEjC,OAAOA,EAAS,MACjB,CACL,CACA,CCbA,IAAIC,EAAW,IAAIC,EAAe,aAAc,CAAE,aAAc,IAAK,aAAc,KAAK,CAAG,EAkD3F,MAAMC,EAAmB,SAAS,cAAc,UAAU,EAC1DA,EAAiB,iBAAiB,SAAUC,CAAmB,EAErD,SAASA,EAAoBC,EAAQ,CAC3C,MAAMC,EAASD,EACd,IAAKE,GACJ;AAAA;AAAA,oCAE8BA,EAAM,aAAa;AAAA,sCACjBA,EAAM,YAAY,UAAUA,EAAM,IAAI,YAAYA,EAAM,IAAI;AAAA;AAAA,uCAE3DA,EAAM,KAAK;AAAA,uCACXA,EAAM,KAAK;AAAA,0CACRA,EAAM,QAAQ;AAAA,2CACbA,EAAM,SAAS;AAAA;AAAA;AAAA,MAGlD,EACD,KAAK,EAAE,EACRJ,EAAiB,mBAAmB,YAAaG,CAAM,EACvDL,EAAS,QAAS,CAExB,CCnEA,MAAMO,EAAkB,SAAS,cAAc,mBAAmB,EAClEA,EAAgB,iBAAiB,SAAUC,CAAY,EAEvD,SAASA,EAAaC,EAAO,CACzBA,EAAM,eAAc,EACpBX,EAAU,EAAC,KAAKY,GAAQ,CACpB,QAAQ,IAAIA,CAAI,EAChBP,EAAoBO,EAAK,IAAI,CACrC,CAAK,CACL"}